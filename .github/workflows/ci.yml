---
name: CI
on:
  push:
    branches:
      - v10_alpha
  pull_request:
jobs:
  php-lint:
    name: "PHP linter"
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: "Install PHP"
        uses: shivammathur/setup-php@v2
        with:
          php-version: "${{ matrix.php-version }}"
      - name: "Run PHP lint"
        run: "composer ci:php:lint"
    strategy:
      matrix:
        php-version:
          - 7.4
  code-quality:
    name: "Code quality checks"
    runs-on: ubuntu-20.04
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: "Install PHP"
        uses: shivammathur/setup-php@v2
        with:
          php-version: "${{ matrix.php-version }}"
      - name: "Show Composer version"
        run: composer --version
      -
        name: "Cache dependencies installed with composer"
        uses: actions/cache@v1
        with:
          key: "php${{ matrix.php-version }}-
          composer-${{ hashFiles('**/composer.json') }}"
          path: ~/.composer/cache
          restore-keys: "php${{ matrix.php-version }}-composer-\n"
      -
        name: "Install Composer dependencies"
        run: "composer install --no-progress"
      -
        name: "Run command"
        run: "composer ci:${{ matrix.command }}"
    strategy:
      matrix:
        command:
          - "ts:lint"
          - "yaml:lint"
          - "json:lint"
          - "php:sniff"
          - "php:codestyle"
        php-version:
          - 7.4
  #code-quality-frontend:
  #  name: "Code quality frontend checks"
  #  runs-on: ubuntu-20.04
  #  strategy:
  #    matrix:
  #      command:
  #        - "style"
  #        - "js"
  #  steps:
  #    -
  #      name: Checkout
  #      uses: actions/checkout@v2
  #    -
  #      name: "Install modules"
  #      working-directory: ./Resources/Private
  #      run: yarn
  #    -
  #      name: "Run command"
  #      working-directory: ./Resources/Private
  #      run: "yarn lint:${{ matrix.command }}"
  xliff-lint:
    name: "Xliff linter"
    runs-on: ubuntu-20.04
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: "Install xmllint"
        run: "sudo apt-get install libxml2-utils wget"
      -
        name: "Download xliff schema"
        run: "wget https://docs.oasis-open.org/xliff/v1.2/os/xliff-core-1.2-strict.xsd"
      -
        name: "Run lint"
        run: "xmllint --schema ./xliff-core-1.2-strict.xsd
              --noout $(find Resources -name '*.xlf')"
  unit-tests:
    name: "Unit tests"
    runs-on: ubuntu-20.04
    needs: php-lint
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: "Install PHP"
        uses: shivammathur/setup-php@v2
        with:
          php-version: "${{ matrix.php-version }}"
      - name: "Show Composer version"
        run: composer --version
      -
        name: "Cache dependencies installed with composer"
        uses: actions/cache@v1
        with:
          key: "php${{ matrix.php-version }}
               -composer-${{ hashFiles('**/composer.json') }}"
          path: ~/.composer/cache
          restore-keys: "php${{ matrix.php-version }}-composer-\n"
      -
        env:
          TYPO3: "${{ matrix.typo3-version }}"
        name: "Install TYPO3 Core"
        run: |
          composer require typo3/minimal:"$TYPO3"
          composer show
      -
        if: "matrix.composer-dependencies == 'lowest'"
        name: "Install lowest dependencies with composer"
        run: |
          composer update --no-ansi --no-interaction |
          --no-progress --prefer-lowest
          composer show
      -
        if: "matrix.composer-dependencies == 'highest'"
        name: "Install highest dependencies with composer"
        run: |
          composer update --no-ansi --no-interaction --no-progress
          composer show
      -
        name: "Run unit tests"
        run: "composer ci:tests:unit"
    strategy:
      matrix:
        composer-dependencies:
          - highest
        php-version:
          - 7.4
        typo3-version:
          - ^10.4
  functional-tests:
    name: "Functional tests"
    runs-on: ubuntu-20.04
    needs: php-lint
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: "Install PHP"
        uses: shivammathur/setup-php@v2
        with:
          php-version: "${{ matrix.php-version }}"
          tools: composer:v2
          extensions: sqlite3
          coverage: none
      - name: "Show Composer version"
        run: composer --version
      -
        name: "Cache dependencies installed with composer"
        uses: actions/cache@v1
        with:
          key: "php${{ matrix.php-version }}
          -composer-${{ hashFiles('**/composer.json') }}"
          path: ~/.composer/cache
          restore-keys: "php${{ matrix.php-version }}-composer-\n"
      -
        env:
          TYPO3: "${{ matrix.typo3-version }}"
        name: "Install TYPO3 Core"
        run: |
          composer require typo3/minimal:"$TYPO3"
          composer show
      -
        if: "matrix.composer-dependencies == 'lowest'"
        name: "Install lowest dependencies with composer"
        run: |
          composer update --no-ansi --no-interaction |
          --no-progress --prefer-lowest
          composer show
      -
        if: "matrix.composer-dependencies == 'highest'"
        name: "Install highest dependencies with composer"
        run: |
          composer update --no-ansi --no-interaction --no-progress
          composer show
      -
        name: "Run functional tests"
        run: |
          export typo3DatabaseDriver="pdo_sqlite";
          composer ci:tests:functional
    strategy:
      matrix:
        composer-dependencies:
          - highest
        php-version:
          - 7.4
        typo3-version:
          - ^10.4
